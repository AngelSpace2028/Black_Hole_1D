exec("""\nR=FileNotFoundError\nQ=range\nI=ValueError\nG=b'\\x00'\nF='>I'\nD=input\nE=open\nC=len\nA=print\nimport os,random as J,struct as B,time as K,paq as H\ndef S(input_data):\n	A=input_data\n	if not isinstance(A,bytes):raise I('Input data must be bytes.')\n	B=A.lstrip(G);return B or G\ndef L(input_data,chunk_size,positions):\n	E=input_data;B=chunk_size;A=[E[A:A+B]for A in Q(0,C(E),B)];F=(B-C(A[-1])%B)%B;A[-1]+=G*F\n	for D in positions:\n		if 0<=D<C(A):A[D]=A[D][::-1]\n	return b''.join(A)\ndef P(data,chunk_size,positions,original_size):A=positions;D=B.pack(F,original_size)+B.pack(F,chunk_size)+B.pack('>B',C(A))+B.pack(f">{C(A)}I",*A);E=H.compress(D+data);return E\ndef M(compressed_filename):\n	J=compressed_filename\n	try:\n		with E(J,'rb')as K:M=K.read()\n		D=H.decompress(M);N=B.unpack(F,D[:4])[0];O=B.unpack(F,D[4:8])[0];I=B.unpack('>B',D[8:9])[0];P=B.unpack(f">{I}I",D[9:9+I*4]);G=L(D[9+I*4:],O,P);G=G[:N];Q=J.replace('.compressed.bin','')\n		with E(Q,'wb')as S:S.write(G)\n		A(f"Decompression complete. Restored file size: {C(G)} bytes")\n	except(R,H.PAQError,B.error)as T:A(f"Decompression failed: {T}")\ndef N(input_filename,max_time_seconds):\n	S=max_time_seconds;M=input_filename\n	try:\n		with E(M,'rb')as Z:N=Z.read();B=C(N)\n	except R:A(f"Error: Input file '{M}' not found.");return\n	O=float('inf');F=1;G=[];T=K.time();U=0\n	while K.time()-T<S:\n		U+=1;D=J.randint(1,min(256,B));V=B//D;W=J.randint(0,min(V,64));H=sorted(J.sample(Q(V),W))if W>0 else[];a=L(N,D,H);I=P(a,D,H,B);X=C(I)/B\n		if X<O:O=X;F=D;G=H;A(f"Improved compression: {C(I)} bytes (chunk size: {D}, positions: {H})")\n	b=K.time()-T;A(f"\\nBest compression achieved after {U} iterations (time limit: {S} seconds):");A(f"Compression ratio: {O:.4f}");A(f"Chunk size: {F}");A(f"Positions: {G}");A(f"Time taken: {b:.2f} seconds");Y=f"{M}.compressed.bin"\n	try:\n		with E(Y,'wb')as c:I=P(L(N,F,G),F,G,B);c.write(I)\n		A(f"Compressed file saved as {Y}")\n	except Exception as d:A(f"Error writing compressed file: {d}")\ndef O():\n	A('Created by Jurijus Pacalovas.')\n	while True:\n		try:\n			B=int(D('Enter mode (1 for compress, 2 for extract): '))\n			if B not in[1,2]:A('Error: Please enter 1 for compress or 2 for extract.')\n			else:break\n		except I:A('Error: Invalid input. Please enter a number (1 or 2).')\n	if B==1:C=D('Enter input file name to compress: ');E=int(D('Enter maximum time limit for compression (in seconds): '));N(C,E)\n	elif B==2:F=D('Enter the base name of the compressed file to extract (without .compressed.bin): ');G=f"{F}.compressed.bin";M(G)\nif __name__=='__main__':O()\n""")